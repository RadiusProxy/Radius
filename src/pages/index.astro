---
import Layout from "@layouts/Layout.astro";
import { Icon } from "astro-icon/components";

import splash from "@assets/splash.json";

const genSplash = (): String => {
    const idx = Math.floor(Math.random() * splash.length);
    return splash[idx].splash;
};

const randomSplash = genSplash();

const link = Astro.url.searchParams.get("redir");
---

<Layout>
    <div class="h-full flex items-center justify-center font-inter">
        <div id="home-screen" class="flex flex-col items-center gap-6">
            <div class="flex items-center gap-2">
                <Icon name="lucide:radius" class="h-16 w-16 rotate-180 text-(--foreground)" />
                <h1 class="text-6xl font-semibold">Radius</h1>
            </div>
            <div class="flex flex-row items-center gap-2 w-4/5 md:w-[26rem] border border-(--input) rounded-lg h-12 p-2">
                <Icon name="lucide:search" />
                <input id="input" type="text" name="Search" class="text-md md:text-sm focus-visible:outline-none w-full h-full placeholder:text-(--muted-foreground)" id="search" placeholder="Search the web">
            </div>
            <p class="text-sm text-center sm:text-base whitespace-nowrap"> { randomSplash } </p>
        </div>
        <div id="tab-system" class="fixed h-[calc(100%-3.5rem)] mt-14 w-full hidden">
            <div id="tab-bar" class="flex items-center gap-2 px-4 py-2 bg-(--background) border-b border-(--border) overflow-x-auto">
                <div id="tabs-list" class="flex items-center gap-2 flex-1 overflow-x-auto">
                    <!-- Tabs will be dynamically added here -->
                </div>
                <button id="new-tab-btn" class="flex items-center gap-1 px-3 py-2 rounded-full bg-(--primary) text-(--primary-foreground) hover:bg-(--primary)/[0.9] transition-colors whitespace-nowrap" title="New Tab">
                    <Icon name="lucide:plus" class="w-4 h-4" />
                    <span class="text-sm font-medium">New Tab</span>
                </button>
            </div>
            <div id="iframe-container" class="relative w-full h-[calc(100%-3rem)] bg-(--background)">
                <!-- iframes will be dynamically added here -->
            </div>
        </div>
        <link-element data-link={link} />
    </div>
</Layout>
<script>
    import { SW } from "@utils/proxy.ts";
    import { Settings } from "@utils/settings.ts";
    import { BareClient } from "@mercuryworkshop/bare-mux"; 
    import { TabManager } from "@utils/tabs.ts";

    const init = async () => {
        const input = document.getElementById("input") as HTMLInputElement;
        const homeScreen = document.getElementById("home-screen") as HTMLDivElement;
        const tabSystem = document.getElementById("tab-system") as HTMLDivElement;
        const iframeContainer = document.getElementById("iframe-container") as HTMLDivElement;
        const tabsList = document.getElementById("tabs-list") as HTMLDivElement;
        const newTabBtn = document.getElementById("new-tab-btn") as HTMLButtonElement;
        const bhl = document.getElementById("bhl") as HTMLDivElement;
        const phl = document.getElementById("phl") as HTMLDivElement;
        const phlImage = document.getElementById("phlImage") as HTMLImageElement;
        const phlTitle = document.getElementById("phlTitle") as HTMLDivElement;
        const proxyLeft = document.getElementById("pal") as HTMLButtonElement;
        const proxyRight = document.getElementById("par") as HTMLButtonElement;
        const proxyReload = document.getElementById("prl") as HTMLButtonElement;
        
        // Initialize TabManager
        const tabManager = TabManager.getInstance();
        
        try {
            tabManager.init(iframeContainer, tabsList);
            
            // Create the first tab
            const firstTabId = tabManager.createTab();
            tabManager.renderTabButton(firstTabId);
            tabManager.switchTab(firstTabId);
        } catch (error) {
            console.error("Error in tab initialization:", error);
        }
        
        // Handle search input
        input.addEventListener("keypress", async (event: any) => {
            if (event.key === "Enter" && input.value.trim()) {
                const sw = SW.getInstance().next().value!;
                const settings = await Settings.getInstance();
                
                // Show tab system, hide home screen
                homeScreen.classList.add("hidden");
                tabSystem.classList.remove("hidden");
                
                // Load URL in active tab
                const activeTab = tabManager.getActiveTab();
                if (activeTab) {
                    tabManager.loadUrl(activeTab.id, input.value);
                    setupIframeListeners(activeTab.iframe);
                }
                
                // Clear input
                input.value = "";
            }
        });
        
        // Handle new tab button
        newTabBtn.addEventListener("click", () => {
            const newTabId = tabManager.createTab();
            tabManager.renderTabButton(newTabId);
            tabManager.switchTab(newTabId);
            
            // Show home screen to allow entering URL
            homeScreen.classList.remove("hidden");
            tabSystem.classList.add("hidden");
            input.focus();
        });
        
        // Setup iframe listeners for proxy header updates
        const setupIframeListeners = (iframe: HTMLIFrameElement) => {
            const iframeWin = iframe.contentWindow;
            
            iframe.addEventListener("load", async () => {
                try {
                    if (iframeWin && iframeWin.document) {
                        phlTitle.innerHTML = iframeWin.document.title || "Loading...";
                        const pageURL = await getURL(iframe);
                        if (pageURL) {
                            try {
                                // Create BareClient only when needed
                                const client = new BareClient();
                                const data = await client.fetch(`https://www.google.com/s2/favicons?domain=${pageURL}&sz=64`);
                                const dataRes = await data.blob();
                                const object = URL.createObjectURL(dataRes);
                                phlImage.src = object;
                            } catch (e) {
                                // Favicon fetch failed, use default
                            }
                        }
                    }
                } catch (e) {
                    // Cross-origin restrictions
                    phlTitle.innerHTML = "Page loaded";
                }
                bhl.classList.add("hidden");
                phl.classList.remove("hidden");
            });
        };

        const getURL = async (iframe: HTMLIFrameElement): Promise<string> => {
            const iframeWin = iframe.contentWindow;
            try {
                if (iframeWin!.__uv) {
                    return iframeWin!.__uv.location.href
                }
                else {
                    return iframeWin!.location.href
                        .replace(iframeWin!.location.origin, '')
                        .replace(iframeWin!.$scramjet.config.prefix, '')
                }
            } catch (e) {
                return "";
            }
        }

        // Setup proxy control buttons to work with active tab
        const setupProxyButtons = () => {
            proxyLeft.addEventListener("click", () => {
                const iframe = tabManager.getActiveTabIframe();
                if (iframe && iframe.contentWindow) {
                    iframe.contentWindow.history.back();
                }
            });
            proxyRight.addEventListener("click", () => {
                const iframe = tabManager.getActiveTabIframe();
                if (iframe && iframe.contentWindow) {
                    iframe.contentWindow.history.forward();
                }
            });
            proxyReload.addEventListener("click", () => {
                const iframe = tabManager.getActiveTabIframe();
                if (iframe && iframe.contentWindow) {
                    iframe.contentWindow.location.reload();
                }
            });
        };
        
        setupProxyButtons();
        
        // Setup listeners for the first tab
        const firstTabIframe = tabManager.getActiveTabIframe();
        if (firstTabIframe) {
            setupIframeListeners(firstTabIframe);
        }
    }

    class CustomComponent extends HTMLElement {
        connectedCallback() {
            const link = this.dataset.link;
            const input = document.getElementById("input") as HTMLInputElement;
            if (link) {
                return (async () => {
                    await init();
                    try {
                        input.value = atob(link);
                    } catch (_) {
                        input.value = link;
                    }
                    input.dispatchEvent(new KeyboardEvent("keypress", { key: "Enter", code: "Enter" }));
                    history.pushState({}, "", "/");
                })();
            }
        }
    }
    
    customElements.define('link-element', CustomComponent);
    document.addEventListener("astro:page-load", async () => {
        try {
            await init();
        }
        catch (_) {}
    });
</script>
